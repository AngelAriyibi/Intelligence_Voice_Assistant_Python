import json
import speech_recognition as sr
import pyttsx3 as tts
import sys
import os

# Load intents from the JSON file
with open('intents.json') as file:
    intents = json.load(file)

# Set up recognizer (speech recognition)
recognizer = sr.Recognizer()

# Initializing speaker
speaker = tts.init()
speaker.setProperty('rate', 150)

todo_list = ['Go shopping', 'Clean Room', 'Record Video']

def create_note():
    global recognizer

    speaker.say("What do you want to write onto your note?")
    speaker.runAndWait()

    done = False

    while not done:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                note = recognizer.recognize_google(audio)
                note = note.lower()

                speaker.say("Choose a file name!")
                speaker.runAndWait()

                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                filename = recognizer.recognize_google(audio)
                filename = filename.lower()

            with open(f"{filename}.txt", 'w') as f:
                f.write(note)
                done = True
                speaker.say(f"I successfully created the note {filename}")
                speaker.runAndWait()

        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("I did not understand you, please try again")
            speaker.runAndWait()

def add_todo():
    global recognizer

    speaker.say("What todo do you want to add?")
    speaker.runAndWait()

    done = False

    while not done:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                item = recognizer.recognize_google(audio)
                item = item.lower()

                print(f"Debug: Adding item to todo list: {item}")
                todo_list.append(item)
                done = True

                speaker.say(f"I added {item} to the to-do list!")
                speaker.runAndWait()

        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("I did not understand. Please try again")
            speaker.runAndWait()

def show_todos():
    print("Debug: Showing to-do list")
    if todo_list:
        speaker.say("The items on your to-do list are the following")
        for item in todo_list:
            speaker.say(item)
            speaker.runAndWait()
    else:
        speaker.say("Your to-do list is empty")
        speaker.runAndWait()

def hello():
    speaker.say("Hello. What can I do for you?")
    speaker.runAndWait()

def quit():
    speaker.say("Bye")
    speaker.runAndWait()
    sys.exit(0)

def match_intent(message):
    for intent in intents["intents"]:
        for pattern in intent["patterns"]:
            if pattern.lower() in message:
                return intent["tag"]
    return None

def handle_input(message):
    print(f"Debug: Handling message: {message}")
    message = message.lower()
    intent = match_intent(message)
    print(f"Debug: Matched intent: {intent}")
    if intent == "greeting":
        hello()
    elif intent == "create_note":
        create_note()
    elif intent == "add_todo":
        add_todo()
    elif intent == "show_todos":
        show_todos()
    elif intent == "exit":
        quit()
    else:
        speaker.say("I did not understand. Please try again.")
        speaker.runAndWait()

# Main loop to listen and respond to commands
while True:
    try:
        with sr.Microphone() as mic:
            recognizer.adjust_for_ambient_noise(mic, duration=0.2)
            print("Listening...")
            audio = recognizer.listen(mic)
            message = recognizer.recognize_google(audio)
            print(f"Recognized message: {message}")
            handle_input(message)
    except sr.UnknownValueError:
        recognizer = sr.Recognizer()
        speaker.say("I did not understand. Please try again.")
        speaker.runAndWait()

